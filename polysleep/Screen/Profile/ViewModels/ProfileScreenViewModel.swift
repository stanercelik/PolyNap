import Foundation
import SwiftUI
import SwiftData
import Combine

@MainActor
class ProfileScreenViewModel: ObservableObject {
    @Published var currentStreak: Int = 0
    @Published var longestStreak: Int = 0
    @Published var selectedCoreEmoji: String = "ðŸŒ™"
    @Published var selectedNapEmoji: String = "âš¡"
    @Published var activeScheduleName: String = ""
    @Published var adaptationPhase: Int = 0
    @Published var totalSleepHours: Double = 0.0
    @Published var activeSchedule: UserSchedule? = nil
    @Published var adaptationDuration: Int = 21 // VarsayÄ±lan 21 gÃ¼n
    
    // Yeni eklenen hesaplanmÄ±ÅŸ Ã¶zellik
    var adaptationPhaseDescription: String {
        switch adaptationPhase {
        case 0:
            return NSLocalizedString("adaptation.phase.0", tableName: "Common", comment: "Adaptation Phase 0: Initial")
        case 1:
            return NSLocalizedString("adaptation.phase.1", tableName: "Common", comment: "Adaptation Phase 1: Adjustment")
        case 2:
            return NSLocalizedString("adaptation.phase.2", tableName: "Common", comment: "Adaptation Phase 2: Adaptation")
        case 3:
            return NSLocalizedString("adaptation.phase.3", tableName: "Common", comment: "Adaptation Phase 3: Advanced Adaptation")
        case 4:
            return NSLocalizedString("adaptation.phase.4", tableName: "Common", comment: "Adaptation Phase 4: Full Adaptation")
        case 5...:
            return NSLocalizedString("adaptation.phase.5", tableName: "Common", comment: "Adaptation Phase 5: Complete Adaptation")
        default:
            return NSLocalizedString("adaptation.phase.unknown", tableName: "Common", comment: "Adaptation Phase Unknown")
        }
    }

    private var modelContext: ModelContext?
    private var cancellables = Set<AnyCancellable>()
    
    init(modelContext: ModelContext? = nil) {
        self.modelContext = modelContext
        if modelContext != nil {
            loadData()
        }
        loadEmojiPreferences()
    }
    
    func setModelContext(_ context: ModelContext) {
        self.modelContext = context
        loadData()
    }
    
    private func loadData() {
        guard let context = modelContext else { 
            print("ProfileScreenViewModel: ModelContext yÃ¼klenemedi, loadData iptal edildi.")
            return
        }
        
        do {
            let descriptor = FetchDescriptor<HistoryModel>(sortBy: [SortDescriptor(\.date, order: .reverse)])
            let historyItems = try context.fetch(descriptor)
            calculateStreak(from: historyItems)
        } catch {
            print("Profildeki streak verileri yÃ¼klenirken hata: \(error)")
        }
        
        Task {
            await loadActiveSchedule()
        }
    }
    
    private func resetScheduleUI() {
        self.activeScheduleName = ""
        self.adaptationPhase = 0
        self.totalSleepHours = 0
        self.activeSchedule = nil
        self.adaptationDuration = 21
    }

    // Aktif uyku programÄ±nÄ± ve adaptasyon aÅŸamasÄ±nÄ± yÃ¼kle
    private func loadActiveSchedule() async {
        guard let context = modelContext else {
            print("ProfileScreenViewModel: ModelContext bulunamadÄ±, aktif program yÃ¼klenemiyor.")
            await MainActor.run { resetScheduleUI() }
            return
        }

        guard let currentUserIdString = AuthManager.shared.currentUser?.id,
              let currentUserId = UUID(uuidString: currentUserIdString) else {
            print("ProfileScreenViewModel: GeÃ§erli kullanÄ±cÄ± ID\'si bulunamadÄ±.")
            await MainActor.run { resetScheduleUI() }
            return
        }
            
        print("ProfileScreenViewModel: Aktif program yÃ¼kleniyor, KullanÄ±cÄ± ID: \\(currentUserId.uuidString)")

        do {
            // Repository Ã¼zerinden aktif programÄ± Ã§ek
            let activeScheduleEntity = try Repository.shared.getActiveUserSchedule(userId: currentUserId, context: context)

            await MainActor.run {
                if let scheduleData = activeScheduleEntity {
                    print("ProfileScreenViewModel: Aktif program bulundu ve UI gÃ¼ncelleniyor: \\(scheduleData.name)")
                    self.activeSchedule = scheduleData
                    self.activeScheduleName = scheduleData.name
                    
                    let scheduleNameLowercased = scheduleData.name.lowercased()
                    if scheduleNameLowercased.contains("uberman") || 
                       scheduleNameLowercased.contains("dymaxion") ||
                       (scheduleNameLowercased.contains("everyman") && scheduleNameLowercased.contains("1")) {
                        self.adaptationDuration = 28
                    } else {
                        self.adaptationDuration = 21
                    }
                    
                    let calculatedPhase = self.calculateAdaptationPhase(schedule: scheduleData)
                    self.adaptationPhase = calculatedPhase
                    
                    // EÄŸer hesaplanan faz, veritabanÄ±ndaki fazdan farklÄ±ysa ve bu bir tutarsÄ±zlÄ±k deÄŸil de
                    // 'gÃ¼nlÃ¼k kontrol' sonucu bir ilerleme ise gÃ¼ncelle.
                    // Bu mantÄ±k, fazÄ±n yalnÄ±zca gÃ¼n geÃ§tikÃ§e artmasÄ±nÄ± saÄŸlar.
                    // EÄŸer faz manuel olarak sÄ±fÄ±rlanmÄ±ÅŸsa (updatedAt gÃ¼ncellenir), calculateAdaptationPhase doÄŸru sonucu verir.
                    if calculatedPhase != scheduleData.adaptationPhase {
                        // Sadece Repository Ã¼zerinden merkezi bir gÃ¼ncelleme fonksiyonu varsa onu kullanmak daha iyi olabilir.
                        // Åžimdilik ViewModel'in context'i Ã¼zerinden gÃ¼ncelliyoruz.
                        // Bu gÃ¼ncelleme, fazÄ±n doÄŸal ilerlemesini yansÄ±tmalÄ±.
                        // scheduleData.updatedAt'in bu noktada deÄŸiÅŸmemesi gerekebilir, Ã§Ã¼nkÃ¼ adaptasyonun baÅŸlangÄ±Ã§ zamanÄ±nÄ± temsil ediyor.
                        // Ancak, eÄŸer fazÄ± 'dÃ¼zeltiyorsak', updatedAt'i de ÅŸimdiye ayarlamak mantÄ±klÄ± olabilir.
                        // Bu, Ã¼rÃ¼n kararÄ±na baÄŸlÄ±dÄ±r. Åžimdilik updatedAt'i gÃ¼ncelleyelim.
                        
                        // scheduleData'nÄ±n context'e baÄŸlÄ± bir nesne olduÄŸundan emin olun.
                        // ProfileScreenViewModel.modelContext'i kullanÄ±yoruz.
                        
                        // Repository'e bir `updateUserScheduleAdaptationPhase` metodu zaten var, onu kullanalÄ±m!
                        // Bu daha temiz bir yaklaÅŸÄ±m olacaktÄ±r.
                        Task {
                            do {
                                try Repository.shared.updateUserScheduleAdaptationPhase(
                                    scheduleId: scheduleData.id, // UserSchedule ID'si
                                    newPhase: calculatedPhase,
                                    context: context // ProfileScreenViewModel'in modelContext'i
                                )
                                print("Adaptasyon aÅŸamasÄ± Repository Ã¼zerinden gÃ¼ncellendi.")
                                // UI'Ä± yeniden yÃ¼klemeye gerek yok Ã§Ã¼nkÃ¼ zaten self.adaptationPhase ayarlandÄ±.
                                // scheduleData.adaptationPhase ViewModel'de gÃ¼ncellenmeyebilir, ancak self.adaptationPhase gÃ¼nceldir.
                            } catch {
                                print("Adaptasyon aÅŸamasÄ± Repository Ã¼zerinden gÃ¼ncellenirken hata: \(error)")
                            }
                        }
                    }
                    self.totalSleepHours = scheduleData.totalSleepHours ?? 0.0
                } else {
                    print("ProfileScreenViewModel: Aktif program bulunamadÄ±.")
                    self.resetScheduleUI()
                }
            }
        } catch {
            print("ProfileScreenViewModel: Aktif program Repository veya SwiftData ile yÃ¼klenirken hata: \\(error)")
            await MainActor.run { self.resetScheduleUI() }
        }
    }
    
    private func calculateAdaptationPhase(schedule: UserSchedule) -> Int {
        let currentDate = Date()
        let updatedAt = schedule.updatedAt
        
        let calendar = Calendar.current
        let components = calendar.dateComponents([.day], from: updatedAt, to: currentDate)
        let daysSinceUpdate = (components.day ?? 0) + 1  // 1'den baÅŸlatmak iÃ§in +1 ekliyoruz
        
        let totalDuration = self.adaptationDuration
        let phase: Int
        
        if totalDuration == 28 {
            if daysSinceUpdate <= 1 { phase = 0 }
            else if daysSinceUpdate <= 7 { phase = 1 }
            else if daysSinceUpdate <= 14 { phase = 2 }
            else if daysSinceUpdate <= 20 { phase = 3 }
            else if daysSinceUpdate <= 27 { phase = 4 }
            else { phase = 5 }
        } else {
            if daysSinceUpdate <= 1 { phase = 0 }
            else if daysSinceUpdate <= 7 { phase = 1 }
            else if daysSinceUpdate <= 14 { phase = 2 }
            else if daysSinceUpdate <= 20 { phase = 3 }
            else { phase = 4 }
        }
        return phase
    }

    private func calculateStreak(from history: [HistoryModel]) {
        guard !history.isEmpty else {
            currentStreak = 0
            longestStreak = 0
            return
        }

        var current = 0
        var longest = 0
        var lastDate: Date? = nil

        for entry in history.sorted(by: { $0.date > $1.date }) {
            guard let last = lastDate else {
                current = 1
                lastDate = entry.date
                continue
            }

            if Calendar.current.isDate(entry.date, inSameDayAs: Calendar.current.date(byAdding: .day, value: -1, to: last)!) {
                current += 1
            } else if !Calendar.current.isDate(entry.date, inSameDayAs: last) {
                current = 1
            }
            lastDate = entry.date
            if current > longest {
                longest = current
            }
        }
        self.currentStreak = current
        let storedLongestStreak = UserDefaults.standard.integer(forKey: "longestStreak")
        if longest > storedLongestStreak {
            UserDefaults.standard.set(longest, forKey: "longestStreak")
            self.longestStreak = longest
        } else {
            self.longestStreak = storedLongestStreak
        }
    }
    
    // MARK: - Emoji Tercihleri
    
    // Emoji kaydetme fonksiyonu - ProfileScreenView iÃ§inde kullanÄ±lÄ±yor
    func saveEmojiPreference(coreEmoji: String? = nil, napEmoji: String? = nil) {
        if let core = coreEmoji {
            self.selectedCoreEmoji = core
        }
        if let nap = napEmoji {
            self.selectedNapEmoji = nap
        }
        
        // Tercihleri UserDefaults'a kaydet
        saveEmojiPreferences()
        
        print("Emoji tercihleri kaydedildi. Core: \(selectedCoreEmoji), Nap: \(selectedNapEmoji)")
    }
    
    // UserDefaults'a emoji tercihlerini kaydet
    private func saveEmojiPreferences() {
        UserDefaults.standard.set(selectedCoreEmoji, forKey: "selectedCoreEmoji")
        UserDefaults.standard.set(selectedNapEmoji, forKey: "selectedNapEmoji")
    }

    private func loadEmojiPreferences() {
        if let coreEmoji = UserDefaults.standard.string(forKey: "selectedCoreEmoji") {
            selectedCoreEmoji = coreEmoji
        }
        if let napEmoji = UserDefaults.standard.string(forKey: "selectedNapEmoji") {
            selectedNapEmoji = napEmoji
        }
    }
    
    // MARK: - Adaptasyon FazÄ± YÃ¶netimi
    
    // Adaptasyon fazÄ±nÄ± sÄ±fÄ±rlama fonksiyonu - ProfileScreenView iÃ§inde kullanÄ±lÄ±yor
    func resetAdaptationPhase() async throws {
        guard let context = modelContext, 
              let currentScheduleId = activeSchedule?.id else { // scheduleId'yi aktif programdan al
            throw ProfileError.noActiveSchedule
        }
        
        do {
            // UserSchedule'Ä± ID ile Ã§ek
            let predicate = #Predicate<UserSchedule> { $0.id == currentScheduleId }
            var fetchDescriptor = FetchDescriptor(predicate: predicate)
            fetchDescriptor.fetchLimit = 1
            
            guard let scheduleToUpdate = try context.fetch(fetchDescriptor).first else {
                print("ProfileScreenViewModel: GÃ¼ncellenecek program SwiftData\'da bulunamadÄ±.")
                throw ProfileError.scheduleUpdateFailed
            }

            scheduleToUpdate.adaptationPhase = 1  // 1. gÃ¼nden baÅŸlat
            scheduleToUpdate.updatedAt = Calendar.current.date(byAdding: .day, value: -1, to: Date()) ?? Date()  // 1 gÃ¼n Ã¶ncesi
            
            try context.save()
            
            // UI'Ä± gÃ¼ncelle
            await MainActor.run {
                self.adaptationPhase = 1  // UI'da da 1. gÃ¼nden baÅŸlat
                self.activeSchedule = scheduleToUpdate // GÃ¼ncellenmiÅŸ schedule'Ä± ata
            }
            
            print("Adaptasyon fazÄ± baÅŸarÄ±yla sÄ±fÄ±rlandÄ± (SwiftData).")
            
        } catch {
            print("Adaptasyon fazÄ± sÄ±fÄ±rlanÄ±rken SwiftData hatasÄ±: \\(error.localizedDescription)")
            throw ProfileError.saveFailed(error.localizedDescription)
        }
    }
}

// MARK: - Hata Tipleri
enum ProfileError: Error, LocalizedError {
    case noActiveSchedule
    case saveFailed(String)
    case scheduleUpdateFailed
    
    var errorDescription: String? {
        switch self {
        case .noActiveSchedule:
            return "SÄ±fÄ±rlanacak aktif bir uyku programÄ± bulunamadÄ±."
        case .saveFailed(let reason):
            return "Kaydetme baÅŸarÄ±sÄ±z: \(reason)"
        case .scheduleUpdateFailed:
            return "Program gÃ¼ncellenemedi."
        }
    }
}

// EÄŸer UserSchedule.scheduleDescription (eski JSONB) kullanÄ±lacaksa
// ve bu bir LocalizedDescription struct'Ä±na decode edilecekse,
// bu struct'Ä±n Codable olmasÄ± gerekir.
// struct LocalizedDescription: Codable {
// var en: String
// var tr: String
// }
