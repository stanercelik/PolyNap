import UserNotifications
import UIKit
import SwiftData
import AVFoundation

// Singleton service to handle notification scheduling.
class AlarmService {
    
    static let shared = AlarmService()
    private init() {}
    
    let notificationCenter = UNUserNotificationCenter.current()
    
    func requestAuthorization() {
        // Uygulama kapalƒ±yken de √ßalmasƒ± i√ßin t√ºm permission'larƒ± iste
        notificationCenter.requestAuthorization(options: [.alert, .sound, .badge, .provisional, .timeSensitive]) { granted, error in
            if granted {
                print("PolyNap Debug: Notification permission granted - uygulama kapalƒ±yken de √ßalacak")
                self.registerAlarmCategory()
                
                // iOS settings kontrol√º
                self.checkNotificationSettings()
            } else if let error = error {
                print("PolyNap Debug: Notification permission error: \(error.localizedDescription)")
            } else {
                print("PolyNap Debug: Notification permission reddedildi - Ayarlar'dan a√ßƒ±lmasƒ± gerekiyor")
            }
        }
    }
    
    /// iOS notification ayarlarƒ±nƒ± kontrol et
    private func checkNotificationSettings() {
        notificationCenter.getNotificationSettings { settings in
            print("PolyNap Debug: Notification Settings:")
            print("- Authorization Status: \(settings.authorizationStatus.rawValue)")
            print("- Alert Setting: \(settings.alertSetting.rawValue)")
            print("- Sound Setting: \(settings.soundSetting.rawValue)")
            print("- Badge Setting: \(settings.badgeSetting.rawValue)")
            
            if #available(iOS 15.0, *) {
                print("- Time Sensitive Setting: \(settings.timeSensitiveSetting.rawValue)")
            }
            
            if settings.soundSetting != .enabled {
                print("‚ö†Ô∏è UYARI: Bildirim sesi kapalƒ±! Ayarlar'dan a√ßƒ±lmasƒ± gerekiyor")
            }
        }
    }
    
    /// Settings'ten erteleme s√ºresini alarak dinamik kategori olu≈üturur
    func updateAlarmCategoryWithSnooze(snoozeDuration: Int) {
        let snoozeAction = UNNotificationAction(identifier: "SNOOZE_ACTION", title: "\(snoozeDuration) Dakika Ertele", options: [])
        let stopAction = UNNotificationAction(identifier: "STOP_ACTION", title: "Kapat", options: [.destructive])
        
        let alarmCategory = UNNotificationCategory(identifier: "ALARM_CATEGORY",
                                                 actions: [snoozeAction, stopAction],
                                                 intentIdentifiers: [],
                                                 options: [.customDismissAction])
        
        notificationCenter.setNotificationCategories([alarmCategory])
        print("PolyNap Debug: Alarm kategorisi g√ºncellendi - Erteleme: \(snoozeDuration) dakika")
    }
    
    private func registerAlarmCategory() {
        // Varsayƒ±lan erteleme s√ºresi - g√ºncel settings'ten alƒ±nacak
        let snoozeAction = UNNotificationAction(identifier: "SNOOZE_ACTION", title: "Ertele", options: [])
        let stopAction = UNNotificationAction(identifier: "STOP_ACTION", title: "Kapat", options: [.destructive])
        
        let alarmCategory = UNNotificationCategory(identifier: "ALARM_CATEGORY",
                                                 actions: [snoozeAction, stopAction],
                                                 intentIdentifiers: [],
                                                 options: [.customDismissAction])
        
        notificationCenter.setNotificationCategories([alarmCategory])
    }

    func scheduleAlarmNotification(date: Date, soundName: String = "alarm.caf", repeats: Bool, modelContext: ModelContext? = nil) {
        // Settings'ten erteleme s√ºresini al ve kategoriyi g√ºncelle
        if let context = modelContext {
            let request = FetchDescriptor<AlarmSettings>()
            do {
                let alarmSettingsList = try context.fetch(request)
                let snoozeDuration = alarmSettingsList.first?.snoozeDurationMinutes ?? 5
                updateAlarmCategoryWithSnooze(snoozeDuration: snoozeDuration)
            } catch {
                print("PolyNap Debug: AlarmSettings alƒ±namadƒ±, varsayƒ±lan kategori kullanƒ±lƒ±yor: \(error)")
                updateAlarmCategoryWithSnooze(snoozeDuration: 5)
            }
        } else {
            updateAlarmCategoryWithSnooze(snoozeDuration: 5)
        }
        
        let content = UNMutableNotificationContent()
        content.title = "üö® UYANMA ALARMI!"
        content.body = "Alarm √ßalƒ±yor! Uyanma zamanƒ± geldi!"
        content.categoryIdentifier = "ALARM_CATEGORY"
        
        // Uygulama kapalƒ±yken de √ßalmasƒ± i√ßin maksimum ayarlar
        if #available(iOS 15.0, *) {
            content.interruptionLevel = .timeSensitive // En y√ºksek seviye (critical olmadan)
            content.relevanceScore = 1.0 // En y√ºksek √∂nem
        }
        
        // Badge sayƒ±sƒ±nƒ± belirgin yap
        content.badge = NSNumber(value: 1)
        
        // Settings'ten se√ßilen alarm sesini kullan veya varsayƒ±lan
        var selectedSoundName = soundName
        if let context = modelContext {
            let request = FetchDescriptor<AlarmSettings>()
            do {
                let alarmSettingsList = try context.fetch(request)
                if let settings = alarmSettingsList.first {
                    selectedSoundName = settings.soundName
                }
            } catch {
                print("PolyNap Debug: AlarmSettings alƒ±namadƒ±, varsayƒ±lan ses kullanƒ±lƒ±yor")
            }
        }
        
        // Ses dosyasƒ± ayarlarƒ± - uygulama kapalƒ±yken de √ßalmasƒ± i√ßin
        content.sound = createNotificationSound(soundName: selectedSoundName)

        let trigger = UNCalendarNotificationTrigger(
            dateMatching: Calendar.current.dateComponents([.hour, .minute, .second], from: date),
            repeats: repeats
        )
        
        // Using a unique identifier for each alarm
        let request = UNNotificationRequest(identifier: "alarm_\(date.timeIntervalSince1970)", content: content, trigger: trigger)

        notificationCenter.add(request) { error in
            if let error = error {
                print("PolyNap Debug: Alarm notification eklenemedi: \(error.localizedDescription)")
            } else {
                print("PolyNap Debug: Alarm ba≈üarƒ±yla planlandƒ± - \(date). Repeats: \(repeats)")
            }
        }
    }
    
    /// 30 saniye boyunca √ßalan g√º√ßl√º alarm - Sleep block sonunda kullanƒ±lƒ±r
    func schedulePersistentAlarm(date: Date, modelContext: ModelContext? = nil) {
        // Settings'ten alarm sesini al
        var selectedSoundName = "alarm.caf"
        if let context = modelContext {
            let request = FetchDescriptor<AlarmSettings>()
            do {
                let alarmSettingsList = try context.fetch(request)
                if let settings = alarmSettingsList.first {
                    selectedSoundName = settings.soundName
                    updateAlarmCategoryWithSnooze(snoozeDuration: settings.snoozeDurationMinutes)
                }
            } catch {
                print("PolyNap Debug: AlarmSettings alƒ±namadƒ±, varsayƒ±lan ayarlar kullanƒ±lƒ±yor")
                updateAlarmCategoryWithSnooze(snoozeDuration: 5)
            }
        } else {
            updateAlarmCategoryWithSnooze(snoozeDuration: 5)
        }
        
        let content = UNMutableNotificationContent()
        content.title = "üö® UYANMA ALARMI!"
        content.body = "Uyku blok zamanƒ±nƒ±z doldu! Uyanma zamanƒ±!"
        content.categoryIdentifier = "ALARM_CATEGORY"
        
        // Uygulama kapalƒ±yken de √ßalmasƒ± i√ßin maksimum etkili ayarlar
        if #available(iOS 15.0, *) {
            content.interruptionLevel = .timeSensitive // Critical olmadan en g√º√ßl√º
            content.relevanceScore = 1.0 // En y√ºksek √∂ncelik
        }
        
        content.badge = NSNumber(value: 1)
        
        // Uygulama kapalƒ±yken de √ßalacak ses ayarlarƒ±
        content.sound = createNotificationSound(soundName: selectedSoundName)
        
        let trigger = UNTimeIntervalNotificationTrigger(
            timeInterval: max(1.0, date.timeIntervalSinceNow),
            repeats: false
        )
        
        let request = UNNotificationRequest(
            identifier: "persistent_alarm_\(date.timeIntervalSince1970)",
            content: content,
            trigger: trigger
        )
        
        notificationCenter.add(request) { error in
            if let error = error {
                print("PolyNap Debug: Persistent alarm eklenemedi: \(error.localizedDescription)")
                print("PolyNap Debug: Hata detayƒ± - notification permission kontrol edilmeli")
            } else {
                print("PolyNap Debug: 30 saniye uzunluƒüunda alarm ba≈üarƒ±yla kuruldu - \(date)")
                print("PolyNap Debug: Alarm uygulama kapalƒ±yken de √ßalacak")
            }
        }
    }
    
    /// Sleep block bitimi i√ßin tekli alarm sistemi - sadece bir alarm zamanlanƒ±r
    func scheduleComprehensiveAlarmForSleepBlockEnd(date: Date, modelContext: ModelContext? = nil) {
        print("PolyNap Debug: Sleep block bitimi i√ßin tekli alarm sistemi ba≈ülatƒ±lƒ±yor")
        
        // Mevcut t√ºm benzer alarmlarƒ± √∂nce iptal et
        cancelDuplicateAlarms(for: date)
        
        DispatchQueue.main.async {
            let appState = UIApplication.shared.applicationState
            if appState == .active {
                // Uygulama √∂nplanda - doƒürudan UI alarm g√∂ster
                print("PolyNap Debug: Uygulama √∂nplanda - doƒürudan AlarmFiringView g√∂steriliyor")
                NotificationCenter.default.post(name: .startAlarm, object: nil)
            } else {
                // Uygulama arka planda veya kapalƒ± - SADECE TEK Bƒ∞R notification sistemi kullan
                print("PolyNap Debug: Uygulama arka planda/kapalƒ± - tek notification sistemi aktif")
                
                // Immediate alarm mƒ± yoksa scheduled alarm mƒ±? Zamana g√∂re karar ver
                if date.timeIntervalSinceNow <= 1.0 {
                    // Hemen √ßalacak alarm
                    self.scheduleImmediateAlarmNotification(modelContext: modelContext)
                } else {
                    // Zamanlanmƒ±≈ü alarm
                    self.schedulePersistentAlarm(date: date, modelContext: modelContext)
                }
            }
        }
    }
    
    /// Anlƒ±k alarm notification'ƒ± (immediate) - sleep block bitiminde kullanƒ±lƒ±r - TEKRARLANMAZ
    private func scheduleImmediateAlarmNotification(modelContext: ModelContext? = nil) {
        // √ñnce aynƒ± t√ºrdeki immediate alarm'larƒ± iptal et
        notificationCenter.getPendingNotificationRequests { requests in
            let immediateAlarmIds = requests.compactMap { request in
                if request.identifier.contains("immediate_alarm_") {
                    return request.identifier
                }
                return nil
            }
            
            if !immediateAlarmIds.isEmpty {
                self.notificationCenter.removePendingNotificationRequests(withIdentifiers: immediateAlarmIds)
                print("PolyNap Debug: \(immediateAlarmIds.count) immediate alarm iptal edildi (duplicate engellendi)")
            }
        }
        
        var selectedSoundName = "alarm.caf"
        if let context = modelContext {
            let request = FetchDescriptor<AlarmSettings>()
            do {
                let alarmSettingsList = try context.fetch(request)
                if let settings = alarmSettingsList.first {
                    selectedSoundName = settings.soundName
                }
            } catch {
                print("PolyNap Debug: AlarmSettings alƒ±namadƒ±, varsayƒ±lan ses kullanƒ±lƒ±yor")
            }
        }
        
        let content = UNMutableNotificationContent()
        content.title = "üö® UYKU BLOƒûU Bƒ∞TTƒ∞!"
        content.body = "≈ûu anda uyanmalƒ±sƒ±nƒ±z! Alarm √ßalƒ±yor!"
        content.categoryIdentifier = "ALARM_CATEGORY"
        
        // Maksimum etkililik ayarlarƒ±
        if #available(iOS 15.0, *) {
            content.interruptionLevel = .timeSensitive
            content.relevanceScore = 1.0
        }
        
        content.badge = NSNumber(value: 1)
        content.sound = createNotificationSound(soundName: selectedSoundName)
        
        // Hemen tetiklenir (0.1 saniye gecikme)
        let trigger = UNTimeIntervalNotificationTrigger(timeInterval: 0.1, repeats: false)
        
        // Unique identifier - sadece bir tane immediate alarm olacak
        let request = UNNotificationRequest(
            identifier: "immediate_alarm_single",
            content: content,
            trigger: trigger
        )
        
        notificationCenter.add(request) { error in
            if let error = error {
                print("PolyNap Debug: Immediate alarm eklenemedi: \(error)")
            } else {
                print("PolyNap Debug: Tek immediate alarm ba≈üarƒ±yla planlandƒ±")
            }
        }
    }
    
    /// Uygulama kapalƒ±yken de √ßalacak notification sound olu≈üturur
    private func createNotificationSound(soundName: String) -> UNNotificationSound {
        // Ses dosyasƒ± adƒ±nƒ± temizle
        let cleanSoundName = soundName.replacingOccurrences(of: ".caf", with: "")
        
        // Bundle'da ses dosyasƒ± var mƒ± kontrol et
        if let soundURL = Bundle.main.url(forResource: cleanSoundName, withExtension: "caf") {
            // Ses dosyasƒ± s√ºresi kontrol et
            do {
                let audioFile = try AVAudioFile(forReading: soundURL)
                let duration = Double(audioFile.length) / audioFile.fileFormat.sampleRate
                
                if duration <= 30.0 { // Apple'ƒ±n 30 saniye kuralƒ±
                    print("PolyNap Debug: √ñzel alarm sesi kullanƒ±lƒ±yor: \(cleanSoundName).caf (\(duration)s)")
                    return UNNotificationSound(named: UNNotificationSoundName(rawValue: "\(cleanSoundName).caf"))
                } else {
                    print("PolyNap Debug: Ses dosyasƒ± 30 saniyeden uzun (\(duration)s), varsayƒ±lan kullanƒ±lacak")
                }
            } catch {
                print("PolyNap Debug: Ses dosyasƒ± kontrol edilemedi: \(error)")
            }
        } else {
            print("PolyNap Debug: Ses dosyasƒ± bulunamadƒ±: \(cleanSoundName).caf")
        }
        
        // Fallback: Sistem varsayƒ±lan alarm sesi (uygulama kapalƒ±yken de √ßalar)
        print("PolyNap Debug: Varsayƒ±lan sistem alarm sesi kullanƒ±lƒ±yor")
        return UNNotificationSound.default
    }
    
    func cancelPendingAlarms() {
        notificationCenter.removeAllPendingNotificationRequests()
        // Badge'i temizle
        UIApplication.shared.applicationIconBadgeNumber = 0
        print("PolyNap Debug: T√ºm bekleyen alarmlar iptal edildi, badge temizlendi")
    }
    
    /// Belirli bir alarm serisini iptal et (persistent alarms i√ßin)
    func cancelPersistentAlarms(for date: Date) {
        let identifier = "persistent_alarm_\(date.timeIntervalSince1970)"
        
        notificationCenter.removePendingNotificationRequests(withIdentifiers: [identifier])
        print("PolyNap Debug: Persistent alarm iptal edildi - \(identifier)")
    }
    
    /// Aynƒ± zamana sahip duplicate alarmlarƒ± iptal eder
    private func cancelDuplicateAlarms(for date: Date) {
        let dateTimeInterval = date.timeIntervalSince1970
        
        notificationCenter.getPendingNotificationRequests { requests in
            let duplicateIdentifiers = requests.compactMap { request -> String? in
                let identifier = request.identifier
                // Aynƒ± zaman i√ßin farklƒ± t√ºrdeki alarmlarƒ± bul
                if identifier.contains("persistent_alarm_\(dateTimeInterval)") ||
                   identifier.contains("immediate_alarm_") ||
                   identifier.contains("alarm_\(dateTimeInterval)") {
                    return identifier
                }
                return nil
            }
            
            if !duplicateIdentifiers.isEmpty {
                self.notificationCenter.removePendingNotificationRequests(withIdentifiers: duplicateIdentifiers)
                print("PolyNap Debug: \(duplicateIdentifiers.count) duplicate alarm iptal edildi")
            }
        }
    }
    
    /// Test ama√ßlƒ± hƒ±zlƒ± alarm kurma (5 saniye sonra) - Tek g√º√ßl√º bildirim
    func scheduleTestAlarm(modelContext: ModelContext? = nil) {
        let testDate = Date().addingTimeInterval(5) // 5 saniye sonra
        scheduleAlarmNotification(date: testDate, repeats: false, modelContext: modelContext)
        print("PolyNap Debug: Test alarmƒ± 5 saniye sonra √ßalacak (uygulama kapalƒ±yken de)")
    }
    
    /// Test ama√ßlƒ± 30 saniye persistent alarm 
    func scheduleTestPersistentAlarm(modelContext: ModelContext? = nil) {
        let testDate = Date().addingTimeInterval(5) // 5 saniye sonra ba≈ülayacak
        schedulePersistentAlarm(date: testDate, modelContext: modelContext)
        print("PolyNap Debug: 30 saniye test alarm 5 saniye sonra ba≈ülayacak (uygulama kapalƒ±yken de)")
    }
    
    /// Test i√ßin tekli alarm sistemi - Sleep block bitimi sim√ºlasyonu
    func scheduleTestComprehensiveAlarm(modelContext: ModelContext? = nil) {
        let testDate = Date().addingTimeInterval(5) // 5 saniye sonra
        scheduleComprehensiveAlarmForSleepBlockEnd(date: testDate, modelContext: modelContext)
        print("PolyNap Debug: Test tekli alarm sistemi 5 saniye sonra ba≈ülayacak - SADECE Bƒ∞R ALARM √ßalacak")
    }
    
    /// Debug: Bekleyen notification'larƒ± listele
    func debugPendingNotifications() {
        notificationCenter.getPendingNotificationRequests { requests in
            print("PolyNap Debug: Bekleyen notification sayƒ±sƒ±: \(requests.count)")
            for request in requests {
                print("- ID: \(request.identifier)")
                print("  Ba≈ülƒ±k: \(request.content.title)")
                print("  Trigger: \(request.trigger?.description ?? "Yok")")
            }
        }
    }
    
    /// iOS settings'e y√∂nlendirme ve kullanƒ±cƒ± rehberliƒüi i√ßin helper fonksiyonlar ekliyorum
    func openNotificationSettings() {
        guard let settingsUrl = URL(string: UIApplication.openSettingsURLString) else { return }
        
        if UIApplication.shared.canOpenURL(settingsUrl) {
            UIApplication.shared.open(settingsUrl)
            print("PolyNap Debug: iOS Ayarlar'a y√∂nlendiriliyor")
        }
    }
    
    /// Kullanƒ±cƒ±ya bildirim ayarlarƒ± rehberi g√∂ster
    func showNotificationGuide() -> String {
        var guide = "üîî Uygulama Kapalƒ±yken Alarm √áalmasƒ± ƒ∞√ßin:\n\n"
        guide += "2Ô∏è‚É£ Bildirimler'e tƒ±klayƒ±n\n"
        guide += "3Ô∏è‚É£ 'Bildirimlere ƒ∞zin Ver'i a√ßƒ±n\n"
        guide += "4Ô∏è‚É£ 'Sesler'i a√ßƒ±n\n"
        guide += "5Ô∏è‚É£ 'Kilitleme Ekranƒ±nda'yƒ± a√ßƒ±n\n"
        guide += "6Ô∏è‚É£ 'Bildirim Merkezi'ni a√ßƒ±n\n"
        guide += "7Ô∏è‚É£ 'Afi≈ü'leri a√ßƒ±n\n\n"
        guide += "‚ö†Ô∏è Bu ayarlar a√ßƒ±k olmadan alarm sadece uygulama a√ßƒ±kken √ßalar!"
        
        return guide
    }
} 
