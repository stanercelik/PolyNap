---
description: 
globs: 
alwaysApply: false
---
# Offline-First Mimarisi Kılavuzu (SwiftData + Supabase)

# 🎯 Amaç (Purpose)
Bu kılavuz, Cursor AI'ye bu projede kod üretirken veya yeniden düzenlerken **her zaman offline-first akışını tercih etmesi** konusunda rehberlik eder. **SwiftData** aracılığıyla yerel kalıcılık **tek doğru kaynaktır (single source of truth)**; Supabase ise fırsat buldukça senkronize olan uzak bir kopya olarak ele alınır.

## ☑️ Temel Prensipler (Core Principles)

1.  **Yerel Öncelikli Okuma/Yazma:** Tüm veri okuma ve yazma işlemleri **yalnızca** `Repository` katmanı üzerinden yapılmalıdır. `View` veya `ViewModel` katmanlarında doğrudan Supabase API'leri çağrılmamalıdır.
2.  **Önce Yerel, Sonra Sıraya Alma:** Yeni veri ekleme veya güncelleme işlemleri önce yerel `ModelContext` kullanılarak SwiftData'ya kaydedilmeli, ardından bu değişiklik arka planda senkronizasyon için bir "Bekleyen Değişiklik" (Pending Change) kuyruğuna eklenmelidir.
3.  **Tek Doğru Kaynak SwiftData:** Uygulama arayüzü (UI) her zaman doğrudan SwiftData'dan beslenmelidir. Veriler Supabase'den çekilse bile önce SwiftData'ya yazılmalı, UI bu yerel veriyi gözlemlemelidir.
4.  **Yumuşak Silme (Soft Delete):** Verileri kalıcı olarak silmek yerine, `@Model` içinde `isDeleted: Bool` veya `deletedAt: Date?` gibi bir alan kullanarak işaretleyin. Gerçek silme işlemi (purge) sunucu tarafında bir zamanlanmış görev (cron job) ile periyodik olarak yapılabilir.
5.  **Çakışma Çözümü (Conflict Resolution):** Senkronizasyon sırasında oluşabilecek çakışmaları çözmek için **Son Yazılan Kazanır (Last-Write-Wins - LWW)** stratejisi kullanılmalıdır. Bu strateji, her `@Model`'da bulunan `updatedAt: Date` alanı kullanılarak uygulanır. Senkronizasyon sırasında, gelen verinin `updatedAt` değeri yereldeki verinin `updatedAt` değerinden daha eskiyse veya eşitse, gelen veri göz ardı edilir.
6.  **Ağ Durumu Yönetimi:** Cihazın ağ bağlantı durumunu (`NWPathMonitor` vb.) aktif olarak izleyin. Bağlantı kurulduğunda bekleyen değişiklikler kuyruğunu otomatik olarak işlemeye başlayın. Zayıf veya kesintili bağlantı durumlarını yönetmek için stratejiler geliştirin (örn. zaman aşımları, tekrar deneme mekanizmaları).
7.  **Arka Plan Senkronizasyonu:** Bekleyen değişiklikler kuyruğunu işlemek için `BackgroundTasks` (özellikle `BGAppRefreshTask`) kullanarak düzenli aralıklarla (örn. ~15 dakikada bir) veya ağ bağlantısı tekrar sağlandığında otomatik senkronizasyon tetikleyin.
8.  **Gerçek Zamanlı Güncellemeler (Opsiyonel):** Supabase Realtime abonelikleri (`supabase.realtime.channel("public:*")`) kullanarak diğer cihazlardan gelen değişiklikleri anlık olarak alın ve SwiftData'ya işleyin. Bu işlem, LWW prensibine uygun olarak (`updatedAt` kontrolü yapılarak) gerçekleştirilmelidir.

## 🛠️ Uygulama Kontrol Listesi (Implementation Checklist)

1.  **Model Tasarımı:**
    *   Her SwiftData `@Model`'ı şu alanları içermelidir: `id: UUID`, `updatedAt: Date`.
    *   Yumuşak silme için opsiyonel olarak `isDeleted: Bool = false` veya `deletedAt: Date?` ekleyin.
    *   SwiftData model şemalarını Supabase tablo şemalarıyla olabildiğince tutarlı tutun (1-1 eşleşme idealdir).
2.  **Yerel Yazma İşlemleri:**
    *   `Repository` katmanında, `ModelContext.save()` işlemini sarmalayan ve başarılı kayıttan sonra otomatik olarak bir `PendingChange` nesnesi oluşturan `saveLocal<T: PersistentModel>(_ model: T) throws` gibi yardımcı bir fonksiyon sağlayın.
    *   `PendingChange` nesnesi, yapılan değişikliğin türünü (create, update, delete), ilgili modelin `id`'sini ve değişikliğin yapıldığı veriyi (örn. JSON formatında) içermelidir.
3.  **Bekleyen Değişiklikler Kuyruğu:**
    *   `PendingChange` nesnelerini ayrı bir SwiftData modelinde veya basit bir dosyada (örn. `PendingChanges.sqlite`, JSON dosyası) saklayın.
    *   Kuyruğun atomik olmasını sağlayın (bir değişiklik işlenirken hata olursa kuyruktan silinmemeli, tekrar denenebilmeli).
4.  **Senkronizasyon Motoru (`SyncEngine`):**
    *   `SyncEngine` adında merkezi bir servis oluşturun.
    *   `performSync()`: Hem bekleyen değişiklikleri Supabase'e gönderme (push) hem de Supabase'den güncel verileri çekme (pull) işlemlerini yönetir.
        *   **Push:** Kuyruktaki değişiklikleri Supabase'e gönderir. Başarılı olanları kuyruktan siler. Hata yönetimi ve tekrar deneme mekanizması içerir.
        *   **Pull:** Supabase'den en son senkronizasyondan sonraki değişiklikleri çeker ve LWW prensibine göre SwiftData'ya işler. `lastPulledAt` zaman damgasını yönetir.
    *   `NWPathMonitor` ve `BGAppRefreshTask` ile entegre çalışır.
    *   `flushQueue()`: Manuel senkronizasyon tetikleme (isteğe bağlı).
5.  **Supabase RPC Fonksiyonları:**
    *   Senkronizasyon mantığını (özellikle pull) verimli hale getirmek için Supabase tarafında `push_changes(changes jsonb)` ve `pull_changes(last_pulled_at timestamp with time zone)` gibi RPC (Remote Procedure Call) fonksiyonları oluşturun. Bu fonksiyonlar, istemci tarafında karmaşık sorgular yapmaktansa, sunucu tarafında veriyi işleyip hazır hale getirir.
6.  **Kullanıcı Deneyimi (UX):**
    *   **İyimser Arayüz (Optimistic UI):** Değişiklikler yerel olarak kaydedildiği anda UI güncellenmelidir. Senkronizasyonun tamamlanması beklenmemelidir.
    *   **Senkronizasyon Durumu Göstergesi:** Kullanıcıya uygulamanın en son ne zaman senkronize edildiğini, bekleyen değişiklik olup olmadığını veya bir senkronizasyon hatası olup olmadığını gösteren görsel bir bildirim sağlayın.
    *   **Hata Bildirimi:** Senkronizasyon hatalarını (özellikle çözümlenemeyen çakışmalar veya kalıcı sunucu hataları) kullanıcıya anlaşılır bir dille bildirin.

## 🔖 Dosya Kalıpları & Örnekler (File Patterns & Examples)
*   `Models/UserSchedule.swift`: Doğru bir offline-first `@Model` örneği.
*   `Services/SyncEngine.swift`: Senkronizasyon iskeletini sağlar. Yeni modeller eklerken bu yapıyı referans alın.
*   `Services/Repository.swift`: Veri erişim katmanı. Tüm yerel ve uzak işlemler buradan yönetilir.
*   `Data/PendingChange.swift`: Bekleyen değişiklikleri temsil eden `@Model`.

## 🚫 Kaçınılması Gerekenler (Anti-Patterns - Reddet & Düzelt)
*   ❌ `ViewModel` veya `View` içinde doğrudan Supabase istemcisini (`supabase.client`) kullanarak `.insert()`, `.update()`, `.delete()` veya `.select()` yapmak.
*   ❌ Supabase'den veri çekerken (`.select()`) bunu önce SwiftData'ya kaydetmeden doğrudan `View` içinde kullanmak.
*   ❌ Sürekli internet bağlantısı olduğunu varsaymak. Tüm Supabase çağrılarını ağ durumu kontrolleri (`isOnline` vb.) ile sarmalayın veya `SyncEngine` üzerinden yapın.
*   ❌ `updatedAt` alanı olmadan LWW çakışma çözümünü uygulamaya çalışmak.
*   ❌ Bekleyen değişiklikler kuyruğunu yönetmeden doğrudan Supabase'e yazmaya çalışmak.

## 💡 Cursor AI İpuçları (Tips for Cursor AI)
*   "X özelliğini ekle" istendiğinde, Supabase API çağrılarından **önce** **SwiftData** modelini ve `Repository` fonksiyonlarını oluştur.
*   Senkronizasyon durumu (`syncState`) için `@Published` bir özellik kullanarak hem başarılı ekleme/güncelleme hem de hata/geri alma (rollback) durumlarını gösterecek örnekler sun.
*   Değişiklik akışları (change streams) için Combine `Publisher` veya Swift Concurrency `AsyncSequence` kullanımını tercih et. `Repository`'den dönen veriler bunlar olmalı.
*   Yumuşak silme (`isDeleted = true`) ve `updatedAt` alanlarını güncellemeyi unutma.

---

> Bu kuralı kısa (< 300 satır) tutun ve **sadece** offline-first davranışına odaklanın. Diğer tüm mimari yönlendirmeler `ARCHITECTURE.md` dosyasında bulunur ve kasıtlı olarak bu kuraldan çıkarılmıştır.

